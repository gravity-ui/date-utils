self.registry={"pages/overview.html":{"title":"Overview","content":"About Date Utils\nDate Utils is a library for dealing with dates and times in JavaScript built with dayjs.\nKey Features\nDate and Time Parsing: Parse dates from various formats, including ISO strings, timestamps, and custom formats\nDate and Time Formatting: Format dates in various formats, including custom formats\nTime Zone Support: Work with dates in different time zones\nRelative Time Parsing: Parse relative time expressions like \"now-1d\" or \"now/d\"\nDuration Calculations: Work with time durations\nLocale Support: Support for different locales and languages\nRoadmap\nWe are actively working on library development and continuously improving its features. Here is the list of the priority major features:\n⏳ Support Unicode Technical Standard #35 format ( #29 )\n⏳ Get rid of dayjs ( #23 )","keywords":[]},"pages/api/overview.html":{"title":"","content":"Modules\nDateTime\nDuration\nSettings\nUtilities","keywords":[]},"pages/get-started.html":{"title":"Getting Started","content":"Installation\nYou can install the Date Utils library using npm or yarn:\n# Using npm npm install @gravity-ui/date-utils # Using yarn yarn add @gravity-ui/date-utils\nBasic Usage Importing\nYou can import the specific functions you need:\nimport {dateTimeParse, dateTime, settings} from '@gravity-ui/date-utils';\nParsing Dates\nThe dateTimeParse function is the main entry point for parsing dates. It can parse dates from various formats:\nimport {dateTimeParse} from '@gravity-ui/date-utils'; // Parse from object const date1 = dateTimeParse ({ year: 2021, month: 7, day: 7 }); // Parse from array [year, month, day] const date2 = dateTimeParse ([ 2021, 7, 7 ]); // Parse from string const date3 = dateTimeParse ( '2021-08-07' ); // Parse from timestamp (milliseconds) const date4 = dateTimeParse ( 1621708204063 ); // Parse relative dates const now = dateTimeParse ( 'now' ); const yesterday = dateTimeParse ( 'now-1d' ); const nextMonth = dateTimeParse ( 'now+1M' ); const startOfDay = dateTimeParse ( 'now/d' ); const startOfNextDay = dateTimeParse ( 'now+1d/d' );\nCreating DateTime Objects\nThe dateTime function creates a DateTime object:\nimport {dateTime} from '@gravity-ui/date-utils'; // Current date and time const now = dateTime (); // From a string const date1 = dateTime ({ input: '2021-08-07' }); // With a specific format const date2 = dateTime ({ input: '2021-08-07', format: 'YYYY-MM-DD' }); // With a specific time zone const date3 = dateTime ({ timeZone: 'Asia/Tokyo' });\nFormatting Dates\nDateTime objects have a format method for formatting dates:\nimport {dateTime} from '@gravity-ui/date-utils'; const date = dateTime ({ input: '2021-08-07T12:30:45' }); // Basic formatting console. log (date. format ( 'YYYY-MM-DD' )); // '2021-08-07' console. log (date. format ( 'DD/MM/YYYY' )); // '07/08/2021' console. log (date. format ( 'MMMM D, YYYY' )); // 'August 7, 2021' console. log (date. format ( 'HH:mm:ss' )); // '12:30:45' // ISO string console. log (date. toISOString ()); // '2021-08-07T12:30:45.000Z'\nManipulating Dates\nDateTime objects provide methods for manipulating dates:\nimport {dateTime} from '@gravity-ui/date-utils'; const date = dateTime ({ input: '2021-08-07' }); // Adding time const tomorrow = date. add ( 1, 'd' ); const nextWeek = date. add ( 1, 'w' ); const nextMonth = date. add ( 1, 'M' ); // Subtracting time const yesterday = date. subtract ( 1, 'd' ); const lastWeek = date. subtract ( 1, 'w' ); const lastMonth = date. subtract ( 1, 'M' ); // Start/end of time periods const startOfDay = date. startOf ( 'day' ); const endOfMonth = date. endOf ( 'month' );\nWorking with Time Zones\nDateTime objects provide methods for working with time zones:\nimport {dateTime, getTimeZonesList, guessUserTimeZone} from '@gravity-ui/date-utils'; // Get the user's time zone const userTimeZone = guessUserTimeZone (); // Get a list of all time zones const timeZones = getTimeZonesList (); // Create a date in a specific time zone const tokyoDate = dateTime ({ timeZone: 'Asia/Tokyo' }); // Convert to a different time zone const newYorkDate = tokyoDate. timeZone ( 'America/New_York' ); // Get the time zone offset console. log (tokyoDate. utcOffset ()); // minutes\nWorking with Relative Dates\nThe library provides support for parsing relative date expressions:\nimport {dateTimeParse} from '@gravity-ui/date-utils'; // Current date and time const now = dateTimeParse ( 'now' ); // 1 day ago const yesterday = dateTimeParse ( 'now-1d' ); // 1 day ago + 1 month const complexDate = dateTimeParse ( 'now-1d+1M' ); // Start of today const startOfToday = dateTimeParse ( 'now/d' ); // Start of tomorrow const startOfTomorrow = dateTimeParse ( 'now+1d/d' );\nSettings and Localization\nThe library provides settings for configuration and localization:\nimport {settings} from '@gravity-ui/date-utils'; // Get current locale const currentLocale = settings. getLocale (); // default is \"en\" // Load and set a new locale settings. loadLocale ( 'de' ). then ( () => { settings. setLocale ( 'de' );\n}); // Customize locale settings settings. updateLocale ({ weekStart: 0 }); // change first day of week\nNext Steps\nFor more detailed information about the library's features and API, check out the API documentation.","keywords":[]},"pages/api/DateTime/type-aliases/BaseUnit.html":{"title":"","content":"API / DateTime / BaseUnit\nBaseUnit = \"year\" | \"years\" | \"y\" | \"month\" | \"months\" | \"M\" | \"day\" | \"days\" | \"d\" | \"hour\" | \"hours\" | \"h\" | \"minute\" | \"minutes\" | \"m\" | \"second\" | \"seconds\" | \"s\" | \"millisecond\" | \"milliseconds\" | \"ms\"\nDefined in: src/typings/dateTime.ts:13","keywords":[]},"pages/api/Duration/type-aliases/DurationInput.html":{"title":"","content":"API / Duration / DurationInput\nDurationInput = Duration | number | string | DurationInputObject | null | undefined\nDefined in: src/typings/duration.ts:7","keywords":[]},"pages/api/Settings/interfaces/Settings.html":{"title":"","content":"API / Settings / Settings\nDefined in: src/settings/types.ts:71\nLibrary settings. The object is implemented as a singleton that manages global configuration for all DateTime instances throughout the application\nExample\nimport {settings} from '@gravity-ui/date-utils'; // Get current locale const currentLocale = settings. getLocale (); // default is \"en\"\nMethods getDefaultTimeZone()\ngetDefaultTimeZone (): string\nDefined in: src/settings/types.ts:84\nReturns\nstring\ngetLocale()\ngetLocale (): string\nDefined in: src/settings/types.ts:74\nReturns\nstring\ngetLocaleData()\ngetLocaleData (): Locale\nDefined in: src/settings/types.ts:76\nReturns\nLocale\nloadLocale()\nloadLocale ( locale ): Promise < void >\nDefined in: src/settings/types.ts:72\nParameters\nParameter Type\nlocale\nstring\nReturns\nPromise < void >\nsetDefaultTimeZone()\nsetDefaultTimeZone ( zone ): void\nDefined in: src/settings/types.ts:82\nParameters\nParameter Type\nzone\n\"system\" | string & object\nReturns\nvoid\nsetLocale()\nsetLocale ( locale ): void\nDefined in: src/settings/types.ts:78\nParameters\nParameter Type\nlocale\nstring\nReturns\nvoid\nsetRelativeParser()\nsetRelativeParser ( parser ): void\nDefined in: src/settings/types.ts:86\nParameters\nParameter Type\nparser\nParser\nReturns\nvoid\nupdateLocale()\nupdateLocale ( config ): void\nDefined in: src/settings/types.ts:80\nParameters\nParameter Type\nconfig\nUpdateLocaleConfig\nReturns\nvoid","keywords":[]},"pages/api/Utilities/functions/dateTime.html":{"title":"","content":"API / Utilities / dateTime\ndateTime ( opt? ): DateTime\nDefined in: src/dateTime/dateTime.ts:899\nCreates a DateTime instance.\nParameters Parameter Type Description\nopt?\n{ format?: FormatInput; input?: DateTimeInput; lang?: string; timeZone?: string; }\nopt.format?\nFormatInput\nstrict format for parsing user's input.\nopt.input?\nDateTimeInput\ninput to parse.\nopt.lang?\nstring\nspecified locale.\nopt.timeZone?\nstring\nspecified time zone.\nReturns\nDateTime","keywords":[]},"pages/api/DateTime/interfaces/DateTimeOptionsWhenParsing.html":{"title":"","content":"API / DateTime / DateTimeOptionsWhenParsing\nDefined in: src/typings/parser.ts:6\nExtends\nDateTimeOptions\nProperties Property Type Description\nallowRelative?\nboolean\n-\nformat?\nstring\nStrict format for parsing user's input\nlang?\nstring\n-\nroundUp?\nboolean\nIf the input is a relative date, e.g. now-6h, then you can specify this to control whether the last part of the date and time value is included or excluded. Example: now-6h and the current time is 12:20:00 if roundUp is set to true the returned DateTime value will be 06:00:00.\ntimeZone?\nstring\nSpecify this if you want to override the timeZone used when parsing or formatting a date and time value. If no timeZone is set, the default timeZone for the current user is used.","keywords":[]},"pages/api/Duration/interfaces/Duration.html":{"title":"","content":"API / Duration / Duration\nDefined in: src/typings/duration.ts:13\nMethods add()\nadd ( amount, unit? ): Duration\nDefined in: src/typings/duration.ts:69\nMake this Duration longer by the specified amount. Return a newly-constructed Duration.\nParameters\nParameter Type\namount\nDurationInput\nunit?\nDurationUnit\nReturns\nDuration\nas()\nas ( unit ): number\nDefined in: src/typings/duration.ts:15\nReturn the length of the duration in the specified unit.\nParameters\nParameter Type\nunit\nDurationUnit\nReturns\nnumber\nasDays()\nasDays (): number\nDefined in: src/typings/duration.ts:46\nReturn the length of the duration in the days.\nReturns\nnumber\nasHours()\nasHours (): number\nDefined in: src/typings/duration.ts:41\nReturn the length of the duration in the hours.\nReturns\nnumber\nasMilliseconds()\nasMilliseconds (): number\nDefined in: src/typings/duration.ts:26\nReturn the length of the duration in the milliseconds.\nReturns\nnumber\nasMinutes()\nasMinutes (): number\nDefined in: src/typings/duration.ts:36\nReturn the length of the duration in the minutes.\nReturns\nnumber\nasMonths()\nasMonths (): number\nDefined in: src/typings/duration.ts:56\nReturn the length of the duration in the months.\nReturns\nnumber\nasQuarters()\nasQuarters (): number\nDefined in: src/typings/duration.ts:61\nReturn the length of the duration in the quarters.\nReturns\nnumber\nasSeconds()\nasSeconds (): number\nDefined in: src/typings/duration.ts:31\nReturn the length of the duration in the seconds.\nReturns\nnumber\nasWeeks()\nasWeeks (): number\nDefined in: src/typings/duration.ts:51\nReturn the length of the duration in the weeks.\nReturns\nnumber\nasYears()\nasYears (): number\nDefined in: src/typings/duration.ts:66\nReturn the length of the duration in the years.\nReturns\nnumber\ndays()\ndays (): number\nDefined in: src/typings/duration.ts:44\nGet the days.\nReturns\nnumber\nformat()\nformat ( formatInput, options? ): string\nDefined in: src/typings/duration.ts:102\nReturns a string representation of this Duration formatted according to the specified format string.\nUsed tokens are S for milliseconds, s for seconds, m for minutes, h for hours, d for days, w for weeks, M for months, and y for years.\nAdd padding by repeating the token, e.g. 'yy' pads the years to two digits, \"hhhh\" pads the hours to four digits.\nParameters\nParameter Type\nformatInput\nstring\noptions?\nFormatOptions\nReturns\nstring\nget()\nget ( unit ): number\nDefined in: src/typings/duration.ts:18\nGet the value of unit.\nParameters\nParameter Type\nunit\nDurationUnit\nReturns\nnumber\nhours()\nhours (): number\nDefined in: src/typings/duration.ts:39\nGet the hours.\nReturns\nnumber\nhumanize()\nhumanize ( withSuffix? ): string\nDefined in: src/typings/duration.ts:90\nReturns a string representation of a Duration in dateTime.from format.\nParameters\nParameter Type\nwithSuffix?\nboolean\nReturns\nstring\nhumanizeIntl()\nhumanizeIntl ( options? ): string\nDefined in: src/typings/duration.ts:93\nReturns a string representation of a Duration with all units included.\nParameters\nParameter Type\noptions?\n{ listStyle?: \"long\" | \"short\" | \"narrow\"; unitDisplay?: \"long\" | \"short\" | \"narrow\"; }\noptions.listStyle?\n\"long\" | \"short\" | \"narrow\"\noptions.unitDisplay?\n\"long\" | \"short\" | \"narrow\"\nReturns\nstring\nisValid()\nisValid (): boolean\nDefined in: src/typings/duration.ts:113\nReturns\nboolean\nlocale()\nCall Signature\nlocale (): string\nDefined in: src/typings/duration.ts:77\nReturns\nstring\nCall Signature\nlocale ( locale ): Duration\nDefined in: src/typings/duration.ts:78\nParameters\nParameter Type\nlocale\nstring\nReturns\nDuration\nmilliseconds()\nmilliseconds (): number\nDefined in: src/typings/duration.ts:24\nGet the milliseconds.\nReturns\nnumber\nminutes()\nminutes (): number\nDefined in: src/typings/duration.ts:34\nGet the minutes.\nReturns\nnumber\nmonths()\nmonths (): number\nDefined in: src/typings/duration.ts:54\nGet the months.\nReturns\nnumber\nnegate()\nnegate (): Duration\nDefined in: src/typings/duration.ts:75\nReturn the negative of this Duration.\nReturns\nDuration\nnormalize()\nnormalize ( options? ): Duration\nDefined in: src/typings/duration.ts:105\nReduce this Duration to its canonical representation in its current units.\nParameters\nParameter Type\noptions?\n{ roundUp?: boolean; }\noptions.roundUp?\nboolean\nReturns\nDuration\nquarters()\nquarters (): number\nDefined in: src/typings/duration.ts:59\nGet the quarters.\nReturns\nnumber\nrescale()\nrescale ( options? ): Duration\nDefined in: src/typings/duration.ts:111\nRescale units to its largest representation\nParameters\nParameter Type\noptions?\n{ roundUp?: boolean; }\noptions.roundUp?\nboolean\nReturns\nDuration\nseconds()\nseconds (): number\nDefined in: src/typings/duration.ts:29\nGet the seconds.\nReturns\nnumber\nset()\nset ( values ): Duration\nDefined in: src/typings/duration.ts:21\nSet the values of specified units. Return a newly-constructed Duration.\nParameters\nParameter Type\nvalues\nPartial\nReturns\nDuration\nshiftTo()\nshiftTo ( units, options? ): Duration\nDefined in: src/typings/duration.ts:108\nConvert this Duration into its representation in a different set of units.\nParameters\nParameter Type\nunits\nDurationUnit []\noptions?\n{ roundUp?: boolean; }\noptions.roundUp?\nboolean\nReturns\nDuration\nsubtract()\nsubtract ( amount, unit? ): Duration\nDefined in: src/typings/duration.ts:72\nMake this Duration shorter by the specified amount. Return a newly-constructed Duration.\nParameters\nParameter Type\namount\nDurationInput\nunit?\nDurationUnit\nReturns\nDuration\ntoISOString()\ntoISOString (): string\nDefined in: src/typings/duration.ts:81\nReturns an ISO 8601-compliant string representation of this Duration.\nReturns\nstring\ntoJSON()\ntoJSON (): string\nDefined in: src/typings/duration.ts:84\nReturns an ISO 8601 representation of this Duration appropriate for use in JSON.\nReturns\nstring\ntoObject()\ntoObject (): Partial\nDefined in: src/typings/duration.ts:87\nReturns a JavaScript object with this Duration's values.\nReturns\nPartial\nweeks()\nweeks (): number\nDefined in: src/typings/duration.ts:49\nGet the weeks.\nReturns\nnumber\nyears()\nyears (): number\nDefined in: src/typings/duration.ts:64\nGet the years.\nReturns\nnumber","keywords":[]},"pages/api/Utilities/functions/isLikeRelative.html":{"title":"","content":"API / Utilities / isLikeRelative\nisLikeRelative ( text ): text is string\nDefined in: src/parser/parser.ts:8\nParameters Parameter Type\ntext\nunknown\nReturns\ntext is string","keywords":[]},"pages/api/Utilities/functions/isValid.html":{"title":"","content":"API / Utilities / isValid\nisValid ( value? ): boolean\nDefined in: src/parser/parser.ts:58\nChecks if value is a valid date which in this context means that it is either\na DateTime instance or it can be parsed by parse function.\nParameters Parameter Type\nvalue?\nstring | DateTime\nReturns\nboolean","keywords":[]},"pages/api/Utilities/functions/isValidTimeZone.html":{"title":"","content":"API / Utilities / isValidTimeZone\nisValidTimeZone ( zone ): boolean\nDefined in: src/timeZone/timeZone.ts:19\nParameters Parameter Type\nzone\nstring\nReturns\nboolean","keywords":[]},"pages/api/Utilities/overview.html":{"title":"","content":"API / Utilities\nFunctions\ndateTime\ndateTimeParse\ndateTimeUtc\ndefaultIsLikeRelative\nduration\nexpandFormat\ngetTimeZonesList\nguessUserTimeZone\nisDateTime\nisDuration\nisLikeRelative\nisValid\nisValidTimeZone\ntimeZoneOffset","keywords":[]},"pages/api/Utilities/functions/timeZoneOffset.html":{"title":"","content":"API / Utilities / timeZoneOffset\ntimeZoneOffset ( zone, ts ): number\nDefined in: src/timeZone/timeZone.ts:52\nParameters Parameter Type\nzone\nstring\nts\nnumber\nReturns\nnumber","keywords":[]},"pages/api/DateTime/type-aliases/FormatInput.html":{"title":"","content":"API / DateTime / FormatInput\nFormatInput = string | undefined\nDefined in: src/typings/dateTime.ts:12","keywords":[]},"pages/api/DateTime/type-aliases/DateTimeInput.html":{"title":"","content":"API / DateTime / DateTimeInput\nDateTimeInput = InputObject | Date | string | number | ( string | number )[] | DateTime | null | undefined\nDefined in: src/typings/dateTime.ts:3","keywords":[]},"pages/api/DateTime/type-aliases/QuarterUnit.html":{"title":"","content":"API / DateTime / QuarterUnit\nQuarterUnit = \"quarter\" | \"quarters\" | \"Q\"\nDefined in: src/typings/dateTime.ts:36","keywords":[]},"pages/api/DateTime/type-aliases/SetObject.html":{"title":"","content":"API / DateTime / SetObject\nSetObject = Partial < Record < AllUnit, number | string >>\nDefined in: src/typings/dateTime.ts:74","keywords":[]},"pages/api/DateTime/overview.html":{"title":"","content":"API / DateTime\nInterfaces\nDateTime\nDateTimeOptionsWhenParsing\nType Aliases\nAllUnit\nBaseUnit\nDateTimeInput\nFormatInput\nInputObject\nQuarterUnit\nSetObject\nStartOfUnit\nWeekUnit","keywords":[]},"pages/api/DateTime/type-aliases/AllUnit.html":{"title":"","content":"API / DateTime / AllUnit\nAllUnit = BaseUnit | QuarterUnit | DateUnit | WeekUnit | IsoWeekUnit | \"weekday\" | \"weekdays\" | \"e\" | \"isoWeekday\" | \"isoWeekdays\" | \"E\" | \"dayOfYear\" | \"dayOfYears\" | \"DDD\" | \"weekYear\" | \"isoWeekYear\"\nDefined in: src/typings/dateTime.ts:41","keywords":[]},"pages/api/DateTime/type-aliases/InputObject.html":{"title":"","content":"API / DateTime / InputObject\nInputObject = Partial < Record < BaseUnit | DateUnit | WeekUnit | \"weekday\" | \"weekdays\" | \"e\" | \"dayOfYear\" | \"dayOfYears\" | \"DDD\" | \"weekYear\", number >>\nDefined in: src/typings/dateTime.ts:59","keywords":[]},"pages/api/DateTime/type-aliases/StartOfUnit.html":{"title":"","content":"API / DateTime / StartOfUnit\nStartOfUnit = BaseUnit | QuarterUnit | WeekUnit | IsoWeekUnit | DateUnit\nDefined in: src/typings/dateTime.ts:40","keywords":[]},"pages/api/DateTime/type-aliases/WeekUnit.html":{"title":"","content":"API / DateTime / WeekUnit\nWeekUnit = \"week\" | \"weeks\" | \"w\"\nDefined in: src/typings/dateTime.ts:37","keywords":[]},"pages/api/DateTime/interfaces/DateTime.html":{"title":"","content":"API / DateTime / DateTime\nDefined in: src/typings/dateTime.ts:76\nProperties Property Type Description\ndaysInMonth\n() => number\nGet the number of days in the current month.\nMethods add()\nadd ( amount, unit? ): DateTime\nDefined in: src/typings/dateTime.ts:77\nParameters\nParameter Type\namount\nDurationInput\nunit?\nDurationUnit\nReturns\nDateTime\ndate()\nCall Signature\ndate (): number\nDefined in: src/typings/dateTime.ts:148\nReturns\nnumber\nCall Signature\ndate ( value ): DateTime\nDefined in: src/typings/dateTime.ts:149\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nday()\nCall Signature\nday (): number\nDefined in: src/typings/dateTime.ts:107\nGets the day of the week, with Sunday as 0 and Saturday as 6.\nReturns\nnumber\nCall Signature\nday ( value ): DateTime\nDefined in: src/typings/dateTime.ts:109\nSets the day of the week, with Sunday as 0 and Saturday as 6.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\ndayOfYear()\nCall Signature\ndayOfYear (): number\nDefined in: src/typings/dateTime.ts:139\nGets the day of the year.\nReturns\nnumber\nCall Signature\ndayOfYear ( value ): DateTime\nDefined in: src/typings/dateTime.ts:141\nSets the day of the year.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\ndiff()\ndiff ( amount, unit?, asFloat? ): number\nDefined in: src/typings/dateTime.ts:81\nParameters\nParameter Type\namount\nDateTimeInput\nunit?\nDurationUnit\nasFloat?\nboolean\nReturns\nnumber\nendOf()\nendOf ( unitOfTime ): DateTime\nDefined in: src/typings/dateTime.ts:93\nParameters\nParameter Type\nunitOfTime\nStartOfUnit\nReturns\nDateTime\nformat()\nformat ( formatInput? ): string\nDefined in: src/typings/dateTime.ts:82\nParameters\nParameter Type\nformatInput?\nFormatInput\nReturns\nstring\nfrom()\nfrom ( formaInput, withoutSuffix? ): string\nDefined in: src/typings/dateTime.ts:84\nParameters\nParameter Type\nformaInput\nDateTimeInput\nwithoutSuffix?\nboolean\nReturns\nstring\nfromNow()\nfromNow ( withoutSuffix? ): string\nDefined in: src/typings/dateTime.ts:83\nParameters\nParameter Type\nwithoutSuffix?\nboolean\nReturns\nstring\nhour()\nCall Signature\nhour (): number\nDefined in: src/typings/dateTime.ts:150\nReturns\nnumber\nCall Signature\nhour ( value ): DateTime\nDefined in: src/typings/dateTime.ts:151\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nisAfter()\nisAfter ( input? ): boolean\nDefined in: src/typings/dateTime.ts:87\nParameters\nParameter Type\ninput?\nDateTimeInput\nReturns\nboolean\nisBefore()\nisBefore ( input? ): boolean\nDefined in: src/typings/dateTime.ts:86\nParameters\nParameter Type\ninput?\nDateTimeInput\nReturns\nboolean\nisoWeek()\nCall Signature\nisoWeek (): number\nDefined in: src/typings/dateTime.ts:129\nGets the ISO week of the year. First week is the week with the first Thursday of the year (i.e. of January) in it.\nReturns\nnumber\nCall Signature\nisoWeek ( value ): DateTime\nDefined in: src/typings/dateTime.ts:131\nSets the ISO week of the year.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nisoWeekday()\nCall Signature\nisoWeekday (): number\nDefined in: src/typings/dateTime.ts:111\nGets the ISO day of the week with 1 being Monday and 7 being Sunday.\nReturns\nnumber\nCall Signature\nisoWeekday ( value ): DateTime\nDefined in: src/typings/dateTime.ts:113\nSets the ISO day of the week with 1 being Monday and 7 being Sunday.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nisoWeeksInYear()\nisoWeeksInYear (): number\nDefined in: src/typings/dateTime.ts:137\nGets the number of weeks in the year, according to ISO weeks.\nReturns\nnumber\nisoWeekYear()\nCall Signature\nisoWeekYear (): number\nDefined in: src/typings/dateTime.ts:133\nGets the ISO week-year.\nReturns\nnumber\nCall Signature\nisoWeekYear ( value ): DateTime\nDefined in: src/typings/dateTime.ts:135\nSets the ISO week-year.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nisSame()\nisSame ( input?, granularity? ): boolean\nDefined in: src/typings/dateTime.ts:85\nParameters\nParameter Type\ninput?\nDateTimeInput\ngranularity?\nStartOfUnit\nReturns\nboolean\nisValid()\nisValid (): boolean\nDefined in: src/typings/dateTime.ts:88\nReturns\nboolean\nlocal()\nlocal ( keepLocalTime? ): DateTime\nDefined in: src/typings/dateTime.ts:89\nParameters\nParameter Type\nkeepLocalTime?\nboolean\nReturns\nDateTime\nlocale()\nCall Signature\nlocale (): string\nDefined in: src/typings/dateTime.ts:90\nReturns\nstring\nCall Signature\nlocale ( locale ): DateTime\nDefined in: src/typings/dateTime.ts:91\nParameters\nParameter Type\nlocale\nstring\nReturns\nDateTime\nmillisecond()\nCall Signature\nmillisecond (): number\nDefined in: src/typings/dateTime.ts:156\nReturns\nnumber\nCall Signature\nmillisecond ( value ): DateTime\nDefined in: src/typings/dateTime.ts:157\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nminute()\nCall Signature\nminute (): number\nDefined in: src/typings/dateTime.ts:152\nReturns\nnumber\nCall Signature\nminute ( value ): DateTime\nDefined in: src/typings/dateTime.ts:153\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nmonth()\nCall Signature\nmonth (): number\nDefined in: src/typings/dateTime.ts:142\nReturns\nnumber\nCall Signature\nmonth ( value ): DateTime\nDefined in: src/typings/dateTime.ts:143\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nquarter()\nCall Signature\nquarter (): number\nDefined in: src/typings/dateTime.ts:144\nReturns\nnumber\nCall Signature\nquarter ( value ): DateTime\nDefined in: src/typings/dateTime.ts:145\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nsecond()\nCall Signature\nsecond (): number\nDefined in: src/typings/dateTime.ts:154\nReturns\nnumber\nCall Signature\nsecond ( value ): DateTime\nDefined in: src/typings/dateTime.ts:155\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nset()\nCall Signature\nset ( unit, amount ): DateTime\nDefined in: src/typings/dateTime.ts:79\nParameters\nParameter Type\nunit\nAllUnit\namount\nnumber\nReturns\nDateTime\nCall Signature\nset ( amount ): DateTime\nDefined in: src/typings/dateTime.ts:80\nParameters\nParameter Type\namount\nPartial\nReturns\nDateTime\nstartOf()\nstartOf ( unitOfTime ): DateTime\nDefined in: src/typings/dateTime.ts:92\nParameters\nParameter Type\nunitOfTime\nStartOfUnit\nReturns\nDateTime\nsubtract()\nsubtract ( amount, unit? ): DateTime\nDefined in: src/typings/dateTime.ts:78\nParameters\nParameter Type\namount\nDurationInput\nunit?\nDurationUnit\nReturns\nDateTime\ntimeZone()\nCall Signature\ntimeZone (): string\nDefined in: src/typings/dateTime.ts:102\nReturns\nstring\nCall Signature\ntimeZone ( timeZone, keepLocalTime? ): DateTime\nDefined in: src/typings/dateTime.ts:103\nParameters\nParameter Type\ntimeZone\nstring\nkeepLocalTime?\nboolean\nReturns\nDateTime\ntoDate()\ntoDate (): Date\nDefined in: src/typings/dateTime.ts:94\nReturns\nDate\ntoISOString()\ntoISOString ( keepOffset? ): string\nDefined in: src/typings/dateTime.ts:95\nParameters\nParameter Type\nkeepOffset?\nboolean\nReturns\nstring\ntoJSON()\ntoJSON (): null | string\nDefined in: src/typings/dateTime.ts:96\nReturns\nnull | string\nunix()\nunix (): number\nDefined in: src/typings/dateTime.ts:98\nReturns\nnumber\nutc()\nutc ( keepLocalTime? ): DateTime\nDefined in: src/typings/dateTime.ts:99\nParameters\nParameter Type\nkeepLocalTime?\nboolean\nReturns\nDateTime\nutcOffset()\nCall Signature\nutcOffset (): number\nDefined in: src/typings/dateTime.ts:100\nReturns\nnumber\nCall Signature\nutcOffset ( offset, keepLocalTime? ): DateTime\nDefined in: src/typings/dateTime.ts:101\nParameters\nParameter Type\noffset\nstring | number\nkeepLocalTime?\nboolean\nReturns\nDateTime\nvalueOf()\nvalueOf (): number\nDefined in: src/typings/dateTime.ts:97\nReturns\nnumber\nweek()\nCall Signature\nweek (): number\nDefined in: src/typings/dateTime.ts:119\nGets the week of the year according to the locale.\nReturns\nnumber\nCall Signature\nweek ( value ): DateTime\nDefined in: src/typings/dateTime.ts:121\nSets the week of the year according to the locale.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nweekday()\nCall Signature\nweekday (): number\nDefined in: src/typings/dateTime.ts:115\nGets the day of the week according to the locale. 0 being first day of the week and 6 being last.\nReturns\nnumber\nCall Signature\nweekday ( value ): number\nDefined in: src/typings/dateTime.ts:117\nSets the day of the week according to the locale. 0 being first day of the week and 6 being last.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nnumber\nweeksInYear()\nweeksInYear (): number\nDefined in: src/typings/dateTime.ts:127\nGets the number of weeks in the year according to locale\nReturns\nnumber\nweekYear()\nCall Signature\nweekYear (): number\nDefined in: src/typings/dateTime.ts:123\nGets the week-year according to the locale.\nReturns\nnumber\nCall Signature\nweekYear ( value ): DateTime\nDefined in: src/typings/dateTime.ts:125\nSets the week-year according to the locale.\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime\nyear()\nCall Signature\nyear (): number\nDefined in: src/typings/dateTime.ts:146\nReturns\nnumber\nCall Signature\nyear ( value ): DateTime\nDefined in: src/typings/dateTime.ts:147\nParameters\nParameter Type\nvalue\nnumber\nReturns\nDateTime","keywords":[]},"pages/api/Duration/type-aliases/DurationInputObject.html":{"title":"","content":"API / Duration / DurationInputObject\nDurationInputObject = Partial < Record < DurationUnit, number | string >>\nDefined in: src/typings/duration.ts:6","keywords":[]},"pages/api/Duration/type-aliases/DurationUnit.html":{"title":"","content":"API / Duration / DurationUnit\nDurationUnit = BaseUnit | QuarterUnit | WeekUnit\nDefined in: src/typings/duration.ts:5","keywords":[]},"pages/api/Duration/overview.html":{"title":"","content":"API / Duration\nInterfaces\nDuration\nType Aliases\nDurationInput\nDurationInputObject\nDurationUnit\nFormatOptions","keywords":[]},"pages/api/Duration/type-aliases/FormatOptions.html":{"title":"","content":"API / Duration / FormatOptions\nFormatOptions = object & Intl.NumberFormatOptions\nDefined in: src/typings/duration.ts:9\nType declaration Name Type\nfloor?\nboolean","keywords":[]},"pages/api/Settings/overview.html":{"title":"","content":"API / Settings\nInterfaces\nSettings","keywords":[]},"pages/api/Utilities/functions/dateTimeUtc.html":{"title":"","content":"API / Utilities / dateTimeUtc\ndateTimeUtc ( opt? ): DateTime\nDefined in: src/dateTime/dateTime.ts:930\nCreates a DateTime instance with fixed offset.\nParameters Parameter Type Description\nopt?\n{ format?: FormatInput; input?: DateTimeInput; lang?: string; offset?: number; }\nopt.format?\nFormatInput\nstrict format for parsing user's input.\nopt.input?\nDateTimeInput\ninput to parse.\nopt.lang?\nstring\nspecified locale.\nopt.offset?\nnumber\nspecified offset.\nReturns\nDateTime","keywords":[]},"pages/api/Utilities/functions/dateTimeParse.html":{"title":"","content":"API / Utilities / dateTimeParse\ndateTimeParse ( input, options? ): undefined | DateTime\nDefined in: src/parser/parser.ts:42\nParses a number, text or Date to a DateTime value. If a timeZone is supplied the incoming value\nis parsed with that timeZone as a base.\nIt can also parse the relative date and time format, e.g. 'now-6h' will be parsed as Date.now() - 6 hours and\nreturned as a valid DateTime value.\nParameters Parameter Type\ninput\nunknown\noptions?\nDateTimeOptionsWhenParsing\nReturns\nundefined | DateTime","keywords":[]},"pages/api/Utilities/functions/duration.html":{"title":"","content":"API / Utilities / duration\nCall Signature\nduration ( amount, unit?, options? ): Duration\nDefined in: src/duration/createDuration.ts:16\nParameters Parameter Type\namount\nDurationInput\nunit?\nDurationUnit\noptions?\nOptions\nReturns\nDuration\nCall Signature\nduration ( amount, options? ): Duration\nDefined in: src/duration/createDuration.ts:21\nParameters Parameter Type\namount\nDurationInput\noptions?\nOptions\nReturns\nDuration","keywords":[]},"pages/api/Utilities/functions/expandFormat.html":{"title":"","content":"API / Utilities / expandFormat\nexpandFormat ( format, formats ): string\nDefined in: src/dateTime/format.ts:16\nParameters Parameter Type\nformat\nstring\nformats\nLongDateFormat\nReturns\nstring","keywords":[]},"pages/api/Utilities/functions/getTimeZonesList.html":{"title":"","content":"API / Utilities / getTimeZonesList\ngetTimeZonesList (): string []\nDefined in: src/timeZone/timeZone.ts:16\nReturns all time zones.\nReturns\nstring []","keywords":[]},"pages/api/Utilities/functions/guessUserTimeZone.html":{"title":"","content":"API / Utilities / guessUserTimeZone\nguessUserTimeZone (): string\nDefined in: src/timeZone/timeZone.ts:9\nReturns the user's time zone.\nReturns\nstring","keywords":[]},"pages/api/Utilities/functions/isDateTime.html":{"title":"","content":"API / Utilities / isDateTime\nisDateTime ( value ): value is DateTime\nDefined in: src/dateTime/dateTime.ts:887\nChecks if value is DateTime.\nParameters Parameter Type Description\nvalue\nunknown\nvalue to check.\nReturns\nvalue is DateTime","keywords":[]},"pages/api/Utilities/functions/isDuration.html":{"title":"","content":"API / Utilities / isDuration\nisDuration ( value ): value is Duration\nDefined in: src/duration/duration.ts:401\nParameters Parameter Type\nvalue\nunknown\nReturns\nvalue is Duration","keywords":[]},"pages/api/Utilities/functions/defaultIsLikeRelative.html":{"title":"","content":"API / Utilities / defaultIsLikeRelative\ndefaultIsLikeRelative ( text ): boolean\nDefined in: src/datemath/datemath.ts:9\nParameters Parameter Type\ntext\nstring\nReturns\nboolean","keywords":[]}}