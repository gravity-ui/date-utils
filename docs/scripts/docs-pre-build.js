// @ts-check

const fs = require('node:fs');
const path = require('node:path');

const yaml = require('yaml');

const {
    getConfig,
    getIndexTocFileName,
    getIndexFilesMap,
    getOriginalTocFile,
    getAutogeneratedTocItem,
    sortObjectKeysWithIndexFirst,
    convertToTocItem,
    createTmpDocs,
    getApiYamlConfig,
} = require('./utils.js');

/** @typedef {import('./types.js').ApiYamlConfig} ApiYamlConfig */

const docsConfig = getConfig();
const originalTocFile = getOriginalTocFile(docsConfig.pathToTocFile);
const [autogeneratedTocItem, autogeneratedTocItemIndex] = getAutogeneratedTocItem(originalTocFile);
const baseTocItemPath = autogeneratedTocItem.href.endsWith('/')
    ? autogeneratedTocItem.href.slice(0, -1)
    : autogeneratedTocItem.href;
const indexFilesMap = getIndexFilesMap({
    dirPath: path.resolve(docsConfig.typedocConfig.out),
    basePath: path.resolve(docsConfig.typedocConfig.out),
    entryFileName: docsConfig.typedocConfig.entryFileName,
    projectName: docsConfig.typedocConfig.name,
});
const indexTocItemName = getIndexTocFileName(docsConfig.typedocConfig.entryFileName);
const apiYamlConfig = getApiYamlConfig({
    indexFilesMap,
    indexTocItemName,
    baseTocItemPath,
    entryFileName: docsConfig.typedocConfig.entryFileName,
});
const sortedApiYamlConfig = sortObjectKeysWithIndexFirst(apiYamlConfig, indexTocItemName);
const tocItems = convertToTocItem(sortedApiYamlConfig, baseTocItemPath);
const tmpDocsPath = createTmpDocs(docsConfig.pathToDocsFolder);
originalTocFile.items[autogeneratedTocItemIndex] = {
    name: autogeneratedTocItem.name,
    items: tocItems,
};
fs.writeFileSync(path.resolve(tmpDocsPath, 'toc.yaml'), yaml.stringify(originalTocFile), 'utf8');
process.stdout.write(tmpDocsPath);
